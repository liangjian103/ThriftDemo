/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ctfo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LON_FIELD_DESC = new org.apache.thrift.protocol.TField("lon", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAP_LON_FIELD_DESC = new org.apache.thrift.protocol.TField("mapLon", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAP_LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("mapLat", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GPS_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("gpsSpeed", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UTC_FIELD_DESC = new org.apache.thrift.protocol.TField("utc", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ALARM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ALARM_UTC_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmUtc", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ALARM_SYS_UTC_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmSysUtc", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VEHICLE_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleSpeed", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BASESTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("basestatus", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EXTENDSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendstatus", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SPEED_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("speedFrom", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField COMMADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("commaddr", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField OEMCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("oemcode", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SYSTEM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("systemTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MSGID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgid", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField IS_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isValid", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField MSG_UTC_FIELD_DESC = new org.apache.thrift.protocol.TField("msgUtc", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public String vid; // required
  public String lat; // required
  public String lon; // required
  public String mapLon; // required
  public String mapLat; // required
  public String gpsSpeed; // required
  public String head; // required
  public String utc; // required
  public String alarmCode; // required
  public String alarmUtc; // required
  public String alarmSysUtc; // required
  public String vehicleSpeed; // required
  public String basestatus; // required
  public String extendstatus; // required
  public String speedFrom; // required
  public String height; // required
  public String commaddr; // required
  public String tid; // required
  public String oemcode; // required
  public String systemTime; // required
  public String msgid; // required
  public String isValid; // required
  public String msgUtc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VID((short)1, "vid"),
    LAT((short)2, "lat"),
    LON((short)3, "lon"),
    MAP_LON((short)4, "mapLon"),
    MAP_LAT((short)5, "mapLat"),
    GPS_SPEED((short)6, "gpsSpeed"),
    HEAD((short)7, "head"),
    UTC((short)8, "utc"),
    ALARM_CODE((short)9, "alarmCode"),
    ALARM_UTC((short)10, "alarmUtc"),
    ALARM_SYS_UTC((short)11, "alarmSysUtc"),
    VEHICLE_SPEED((short)12, "vehicleSpeed"),
    BASESTATUS((short)13, "basestatus"),
    EXTENDSTATUS((short)14, "extendstatus"),
    SPEED_FROM((short)15, "speedFrom"),
    HEIGHT((short)16, "height"),
    COMMADDR((short)17, "commaddr"),
    TID((short)18, "tid"),
    OEMCODE((short)19, "oemcode"),
    SYSTEM_TIME((short)20, "systemTime"),
    MSGID((short)21, "msgid"),
    IS_VALID((short)22, "isValid"),
    MSG_UTC((short)23, "msgUtc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VID
          return VID;
        case 2: // LAT
          return LAT;
        case 3: // LON
          return LON;
        case 4: // MAP_LON
          return MAP_LON;
        case 5: // MAP_LAT
          return MAP_LAT;
        case 6: // GPS_SPEED
          return GPS_SPEED;
        case 7: // HEAD
          return HEAD;
        case 8: // UTC
          return UTC;
        case 9: // ALARM_CODE
          return ALARM_CODE;
        case 10: // ALARM_UTC
          return ALARM_UTC;
        case 11: // ALARM_SYS_UTC
          return ALARM_SYS_UTC;
        case 12: // VEHICLE_SPEED
          return VEHICLE_SPEED;
        case 13: // BASESTATUS
          return BASESTATUS;
        case 14: // EXTENDSTATUS
          return EXTENDSTATUS;
        case 15: // SPEED_FROM
          return SPEED_FROM;
        case 16: // HEIGHT
          return HEIGHT;
        case 17: // COMMADDR
          return COMMADDR;
        case 18: // TID
          return TID;
        case 19: // OEMCODE
          return OEMCODE;
        case 20: // SYSTEM_TIME
          return SYSTEM_TIME;
        case 21: // MSGID
          return MSGID;
        case 22: // IS_VALID
          return IS_VALID;
        case 23: // MSG_UTC
          return MSG_UTC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LON, new org.apache.thrift.meta_data.FieldMetaData("lon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_LON, new org.apache.thrift.meta_data.FieldMetaData("mapLon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_LAT, new org.apache.thrift.meta_data.FieldMetaData("mapLat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GPS_SPEED, new org.apache.thrift.meta_data.FieldMetaData("gpsSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UTC, new org.apache.thrift.meta_data.FieldMetaData("utc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALARM_CODE, new org.apache.thrift.meta_data.FieldMetaData("alarmCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALARM_UTC, new org.apache.thrift.meta_data.FieldMetaData("alarmUtc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALARM_SYS_UTC, new org.apache.thrift.meta_data.FieldMetaData("alarmSysUtc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VEHICLE_SPEED, new org.apache.thrift.meta_data.FieldMetaData("vehicleSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASESTATUS, new org.apache.thrift.meta_data.FieldMetaData("basestatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENDSTATUS, new org.apache.thrift.meta_data.FieldMetaData("extendstatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPEED_FROM, new org.apache.thrift.meta_data.FieldMetaData("speedFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMADDR, new org.apache.thrift.meta_data.FieldMetaData("commaddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OEMCODE, new org.apache.thrift.meta_data.FieldMetaData("oemcode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_TIME, new org.apache.thrift.meta_data.FieldMetaData("systemTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSGID, new org.apache.thrift.meta_data.FieldMetaData("msgid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_VALID, new org.apache.thrift.meta_data.FieldMetaData("isValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_UTC, new org.apache.thrift.meta_data.FieldMetaData("msgUtc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    String vid,
    String lat,
    String lon,
    String mapLon,
    String mapLat,
    String gpsSpeed,
    String head,
    String utc,
    String alarmCode,
    String alarmUtc,
    String alarmSysUtc,
    String vehicleSpeed,
    String basestatus,
    String extendstatus,
    String speedFrom,
    String height,
    String commaddr,
    String tid,
    String oemcode,
    String systemTime,
    String msgid,
    String isValid,
    String msgUtc)
  {
    this();
    this.vid = vid;
    this.lat = lat;
    this.lon = lon;
    this.mapLon = mapLon;
    this.mapLat = mapLat;
    this.gpsSpeed = gpsSpeed;
    this.head = head;
    this.utc = utc;
    this.alarmCode = alarmCode;
    this.alarmUtc = alarmUtc;
    this.alarmSysUtc = alarmSysUtc;
    this.vehicleSpeed = vehicleSpeed;
    this.basestatus = basestatus;
    this.extendstatus = extendstatus;
    this.speedFrom = speedFrom;
    this.height = height;
    this.commaddr = commaddr;
    this.tid = tid;
    this.oemcode = oemcode;
    this.systemTime = systemTime;
    this.msgid = msgid;
    this.isValid = isValid;
    this.msgUtc = msgUtc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    if (other.isSetVid()) {
      this.vid = other.vid;
    }
    if (other.isSetLat()) {
      this.lat = other.lat;
    }
    if (other.isSetLon()) {
      this.lon = other.lon;
    }
    if (other.isSetMapLon()) {
      this.mapLon = other.mapLon;
    }
    if (other.isSetMapLat()) {
      this.mapLat = other.mapLat;
    }
    if (other.isSetGpsSpeed()) {
      this.gpsSpeed = other.gpsSpeed;
    }
    if (other.isSetHead()) {
      this.head = other.head;
    }
    if (other.isSetUtc()) {
      this.utc = other.utc;
    }
    if (other.isSetAlarmCode()) {
      this.alarmCode = other.alarmCode;
    }
    if (other.isSetAlarmUtc()) {
      this.alarmUtc = other.alarmUtc;
    }
    if (other.isSetAlarmSysUtc()) {
      this.alarmSysUtc = other.alarmSysUtc;
    }
    if (other.isSetVehicleSpeed()) {
      this.vehicleSpeed = other.vehicleSpeed;
    }
    if (other.isSetBasestatus()) {
      this.basestatus = other.basestatus;
    }
    if (other.isSetExtendstatus()) {
      this.extendstatus = other.extendstatus;
    }
    if (other.isSetSpeedFrom()) {
      this.speedFrom = other.speedFrom;
    }
    if (other.isSetHeight()) {
      this.height = other.height;
    }
    if (other.isSetCommaddr()) {
      this.commaddr = other.commaddr;
    }
    if (other.isSetTid()) {
      this.tid = other.tid;
    }
    if (other.isSetOemcode()) {
      this.oemcode = other.oemcode;
    }
    if (other.isSetSystemTime()) {
      this.systemTime = other.systemTime;
    }
    if (other.isSetMsgid()) {
      this.msgid = other.msgid;
    }
    if (other.isSetIsValid()) {
      this.isValid = other.isValid;
    }
    if (other.isSetMsgUtc()) {
      this.msgUtc = other.msgUtc;
    }
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this.vid = null;
    this.lat = null;
    this.lon = null;
    this.mapLon = null;
    this.mapLat = null;
    this.gpsSpeed = null;
    this.head = null;
    this.utc = null;
    this.alarmCode = null;
    this.alarmUtc = null;
    this.alarmSysUtc = null;
    this.vehicleSpeed = null;
    this.basestatus = null;
    this.extendstatus = null;
    this.speedFrom = null;
    this.height = null;
    this.commaddr = null;
    this.tid = null;
    this.oemcode = null;
    this.systemTime = null;
    this.msgid = null;
    this.isValid = null;
    this.msgUtc = null;
  }

  public String getVid() {
    return this.vid;
  }

  public Message setVid(String vid) {
    this.vid = vid;
    return this;
  }

  public void unsetVid() {
    this.vid = null;
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return this.vid != null;
  }

  public void setVidIsSet(boolean value) {
    if (!value) {
      this.vid = null;
    }
  }

  public String getLat() {
    return this.lat;
  }

  public Message setLat(String lat) {
    this.lat = lat;
    return this;
  }

  public void unsetLat() {
    this.lat = null;
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return this.lat != null;
  }

  public void setLatIsSet(boolean value) {
    if (!value) {
      this.lat = null;
    }
  }

  public String getLon() {
    return this.lon;
  }

  public Message setLon(String lon) {
    this.lon = lon;
    return this;
  }

  public void unsetLon() {
    this.lon = null;
  }

  /** Returns true if field lon is set (has been assigned a value) and false otherwise */
  public boolean isSetLon() {
    return this.lon != null;
  }

  public void setLonIsSet(boolean value) {
    if (!value) {
      this.lon = null;
    }
  }

  public String getMapLon() {
    return this.mapLon;
  }

  public Message setMapLon(String mapLon) {
    this.mapLon = mapLon;
    return this;
  }

  public void unsetMapLon() {
    this.mapLon = null;
  }

  /** Returns true if field mapLon is set (has been assigned a value) and false otherwise */
  public boolean isSetMapLon() {
    return this.mapLon != null;
  }

  public void setMapLonIsSet(boolean value) {
    if (!value) {
      this.mapLon = null;
    }
  }

  public String getMapLat() {
    return this.mapLat;
  }

  public Message setMapLat(String mapLat) {
    this.mapLat = mapLat;
    return this;
  }

  public void unsetMapLat() {
    this.mapLat = null;
  }

  /** Returns true if field mapLat is set (has been assigned a value) and false otherwise */
  public boolean isSetMapLat() {
    return this.mapLat != null;
  }

  public void setMapLatIsSet(boolean value) {
    if (!value) {
      this.mapLat = null;
    }
  }

  public String getGpsSpeed() {
    return this.gpsSpeed;
  }

  public Message setGpsSpeed(String gpsSpeed) {
    this.gpsSpeed = gpsSpeed;
    return this;
  }

  public void unsetGpsSpeed() {
    this.gpsSpeed = null;
  }

  /** Returns true if field gpsSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetGpsSpeed() {
    return this.gpsSpeed != null;
  }

  public void setGpsSpeedIsSet(boolean value) {
    if (!value) {
      this.gpsSpeed = null;
    }
  }

  public String getHead() {
    return this.head;
  }

  public Message setHead(String head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  public String getUtc() {
    return this.utc;
  }

  public Message setUtc(String utc) {
    this.utc = utc;
    return this;
  }

  public void unsetUtc() {
    this.utc = null;
  }

  /** Returns true if field utc is set (has been assigned a value) and false otherwise */
  public boolean isSetUtc() {
    return this.utc != null;
  }

  public void setUtcIsSet(boolean value) {
    if (!value) {
      this.utc = null;
    }
  }

  public String getAlarmCode() {
    return this.alarmCode;
  }

  public Message setAlarmCode(String alarmCode) {
    this.alarmCode = alarmCode;
    return this;
  }

  public void unsetAlarmCode() {
    this.alarmCode = null;
  }

  /** Returns true if field alarmCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmCode() {
    return this.alarmCode != null;
  }

  public void setAlarmCodeIsSet(boolean value) {
    if (!value) {
      this.alarmCode = null;
    }
  }

  public String getAlarmUtc() {
    return this.alarmUtc;
  }

  public Message setAlarmUtc(String alarmUtc) {
    this.alarmUtc = alarmUtc;
    return this;
  }

  public void unsetAlarmUtc() {
    this.alarmUtc = null;
  }

  /** Returns true if field alarmUtc is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmUtc() {
    return this.alarmUtc != null;
  }

  public void setAlarmUtcIsSet(boolean value) {
    if (!value) {
      this.alarmUtc = null;
    }
  }

  public String getAlarmSysUtc() {
    return this.alarmSysUtc;
  }

  public Message setAlarmSysUtc(String alarmSysUtc) {
    this.alarmSysUtc = alarmSysUtc;
    return this;
  }

  public void unsetAlarmSysUtc() {
    this.alarmSysUtc = null;
  }

  /** Returns true if field alarmSysUtc is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmSysUtc() {
    return this.alarmSysUtc != null;
  }

  public void setAlarmSysUtcIsSet(boolean value) {
    if (!value) {
      this.alarmSysUtc = null;
    }
  }

  public String getVehicleSpeed() {
    return this.vehicleSpeed;
  }

  public Message setVehicleSpeed(String vehicleSpeed) {
    this.vehicleSpeed = vehicleSpeed;
    return this;
  }

  public void unsetVehicleSpeed() {
    this.vehicleSpeed = null;
  }

  /** Returns true if field vehicleSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicleSpeed() {
    return this.vehicleSpeed != null;
  }

  public void setVehicleSpeedIsSet(boolean value) {
    if (!value) {
      this.vehicleSpeed = null;
    }
  }

  public String getBasestatus() {
    return this.basestatus;
  }

  public Message setBasestatus(String basestatus) {
    this.basestatus = basestatus;
    return this;
  }

  public void unsetBasestatus() {
    this.basestatus = null;
  }

  /** Returns true if field basestatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBasestatus() {
    return this.basestatus != null;
  }

  public void setBasestatusIsSet(boolean value) {
    if (!value) {
      this.basestatus = null;
    }
  }

  public String getExtendstatus() {
    return this.extendstatus;
  }

  public Message setExtendstatus(String extendstatus) {
    this.extendstatus = extendstatus;
    return this;
  }

  public void unsetExtendstatus() {
    this.extendstatus = null;
  }

  /** Returns true if field extendstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendstatus() {
    return this.extendstatus != null;
  }

  public void setExtendstatusIsSet(boolean value) {
    if (!value) {
      this.extendstatus = null;
    }
  }

  public String getSpeedFrom() {
    return this.speedFrom;
  }

  public Message setSpeedFrom(String speedFrom) {
    this.speedFrom = speedFrom;
    return this;
  }

  public void unsetSpeedFrom() {
    this.speedFrom = null;
  }

  /** Returns true if field speedFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeedFrom() {
    return this.speedFrom != null;
  }

  public void setSpeedFromIsSet(boolean value) {
    if (!value) {
      this.speedFrom = null;
    }
  }

  public String getHeight() {
    return this.height;
  }

  public Message setHeight(String height) {
    this.height = height;
    return this;
  }

  public void unsetHeight() {
    this.height = null;
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return this.height != null;
  }

  public void setHeightIsSet(boolean value) {
    if (!value) {
      this.height = null;
    }
  }

  public String getCommaddr() {
    return this.commaddr;
  }

  public Message setCommaddr(String commaddr) {
    this.commaddr = commaddr;
    return this;
  }

  public void unsetCommaddr() {
    this.commaddr = null;
  }

  /** Returns true if field commaddr is set (has been assigned a value) and false otherwise */
  public boolean isSetCommaddr() {
    return this.commaddr != null;
  }

  public void setCommaddrIsSet(boolean value) {
    if (!value) {
      this.commaddr = null;
    }
  }

  public String getTid() {
    return this.tid;
  }

  public Message setTid(String tid) {
    this.tid = tid;
    return this;
  }

  public void unsetTid() {
    this.tid = null;
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return this.tid != null;
  }

  public void setTidIsSet(boolean value) {
    if (!value) {
      this.tid = null;
    }
  }

  public String getOemcode() {
    return this.oemcode;
  }

  public Message setOemcode(String oemcode) {
    this.oemcode = oemcode;
    return this;
  }

  public void unsetOemcode() {
    this.oemcode = null;
  }

  /** Returns true if field oemcode is set (has been assigned a value) and false otherwise */
  public boolean isSetOemcode() {
    return this.oemcode != null;
  }

  public void setOemcodeIsSet(boolean value) {
    if (!value) {
      this.oemcode = null;
    }
  }

  public String getSystemTime() {
    return this.systemTime;
  }

  public Message setSystemTime(String systemTime) {
    this.systemTime = systemTime;
    return this;
  }

  public void unsetSystemTime() {
    this.systemTime = null;
  }

  /** Returns true if field systemTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemTime() {
    return this.systemTime != null;
  }

  public void setSystemTimeIsSet(boolean value) {
    if (!value) {
      this.systemTime = null;
    }
  }

  public String getMsgid() {
    return this.msgid;
  }

  public Message setMsgid(String msgid) {
    this.msgid = msgid;
    return this;
  }

  public void unsetMsgid() {
    this.msgid = null;
  }

  /** Returns true if field msgid is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgid() {
    return this.msgid != null;
  }

  public void setMsgidIsSet(boolean value) {
    if (!value) {
      this.msgid = null;
    }
  }

  public String getIsValid() {
    return this.isValid;
  }

  public Message setIsValid(String isValid) {
    this.isValid = isValid;
    return this;
  }

  public void unsetIsValid() {
    this.isValid = null;
  }

  /** Returns true if field isValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsValid() {
    return this.isValid != null;
  }

  public void setIsValidIsSet(boolean value) {
    if (!value) {
      this.isValid = null;
    }
  }

  public String getMsgUtc() {
    return this.msgUtc;
  }

  public Message setMsgUtc(String msgUtc) {
    this.msgUtc = msgUtc;
    return this;
  }

  public void unsetMsgUtc() {
    this.msgUtc = null;
  }

  /** Returns true if field msgUtc is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgUtc() {
    return this.msgUtc != null;
  }

  public void setMsgUtcIsSet(boolean value) {
    if (!value) {
      this.msgUtc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((String)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((String)value);
      }
      break;

    case LON:
      if (value == null) {
        unsetLon();
      } else {
        setLon((String)value);
      }
      break;

    case MAP_LON:
      if (value == null) {
        unsetMapLon();
      } else {
        setMapLon((String)value);
      }
      break;

    case MAP_LAT:
      if (value == null) {
        unsetMapLat();
      } else {
        setMapLat((String)value);
      }
      break;

    case GPS_SPEED:
      if (value == null) {
        unsetGpsSpeed();
      } else {
        setGpsSpeed((String)value);
      }
      break;

    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((String)value);
      }
      break;

    case UTC:
      if (value == null) {
        unsetUtc();
      } else {
        setUtc((String)value);
      }
      break;

    case ALARM_CODE:
      if (value == null) {
        unsetAlarmCode();
      } else {
        setAlarmCode((String)value);
      }
      break;

    case ALARM_UTC:
      if (value == null) {
        unsetAlarmUtc();
      } else {
        setAlarmUtc((String)value);
      }
      break;

    case ALARM_SYS_UTC:
      if (value == null) {
        unsetAlarmSysUtc();
      } else {
        setAlarmSysUtc((String)value);
      }
      break;

    case VEHICLE_SPEED:
      if (value == null) {
        unsetVehicleSpeed();
      } else {
        setVehicleSpeed((String)value);
      }
      break;

    case BASESTATUS:
      if (value == null) {
        unsetBasestatus();
      } else {
        setBasestatus((String)value);
      }
      break;

    case EXTENDSTATUS:
      if (value == null) {
        unsetExtendstatus();
      } else {
        setExtendstatus((String)value);
      }
      break;

    case SPEED_FROM:
      if (value == null) {
        unsetSpeedFrom();
      } else {
        setSpeedFrom((String)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((String)value);
      }
      break;

    case COMMADDR:
      if (value == null) {
        unsetCommaddr();
      } else {
        setCommaddr((String)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((String)value);
      }
      break;

    case OEMCODE:
      if (value == null) {
        unsetOemcode();
      } else {
        setOemcode((String)value);
      }
      break;

    case SYSTEM_TIME:
      if (value == null) {
        unsetSystemTime();
      } else {
        setSystemTime((String)value);
      }
      break;

    case MSGID:
      if (value == null) {
        unsetMsgid();
      } else {
        setMsgid((String)value);
      }
      break;

    case IS_VALID:
      if (value == null) {
        unsetIsValid();
      } else {
        setIsValid((String)value);
      }
      break;

    case MSG_UTC:
      if (value == null) {
        unsetMsgUtc();
      } else {
        setMsgUtc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VID:
      return getVid();

    case LAT:
      return getLat();

    case LON:
      return getLon();

    case MAP_LON:
      return getMapLon();

    case MAP_LAT:
      return getMapLat();

    case GPS_SPEED:
      return getGpsSpeed();

    case HEAD:
      return getHead();

    case UTC:
      return getUtc();

    case ALARM_CODE:
      return getAlarmCode();

    case ALARM_UTC:
      return getAlarmUtc();

    case ALARM_SYS_UTC:
      return getAlarmSysUtc();

    case VEHICLE_SPEED:
      return getVehicleSpeed();

    case BASESTATUS:
      return getBasestatus();

    case EXTENDSTATUS:
      return getExtendstatus();

    case SPEED_FROM:
      return getSpeedFrom();

    case HEIGHT:
      return getHeight();

    case COMMADDR:
      return getCommaddr();

    case TID:
      return getTid();

    case OEMCODE:
      return getOemcode();

    case SYSTEM_TIME:
      return getSystemTime();

    case MSGID:
      return getMsgid();

    case IS_VALID:
      return getIsValid();

    case MSG_UTC:
      return getMsgUtc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VID:
      return isSetVid();
    case LAT:
      return isSetLat();
    case LON:
      return isSetLon();
    case MAP_LON:
      return isSetMapLon();
    case MAP_LAT:
      return isSetMapLat();
    case GPS_SPEED:
      return isSetGpsSpeed();
    case HEAD:
      return isSetHead();
    case UTC:
      return isSetUtc();
    case ALARM_CODE:
      return isSetAlarmCode();
    case ALARM_UTC:
      return isSetAlarmUtc();
    case ALARM_SYS_UTC:
      return isSetAlarmSysUtc();
    case VEHICLE_SPEED:
      return isSetVehicleSpeed();
    case BASESTATUS:
      return isSetBasestatus();
    case EXTENDSTATUS:
      return isSetExtendstatus();
    case SPEED_FROM:
      return isSetSpeedFrom();
    case HEIGHT:
      return isSetHeight();
    case COMMADDR:
      return isSetCommaddr();
    case TID:
      return isSetTid();
    case OEMCODE:
      return isSetOemcode();
    case SYSTEM_TIME:
      return isSetSystemTime();
    case MSGID:
      return isSetMsgid();
    case IS_VALID:
      return isSetIsValid();
    case MSG_UTC:
      return isSetMsgUtc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_vid = true && this.isSetVid();
    boolean that_present_vid = true && that.isSetVid();
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (!this.vid.equals(that.vid))
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (!this.lat.equals(that.lat))
        return false;
    }

    boolean this_present_lon = true && this.isSetLon();
    boolean that_present_lon = true && that.isSetLon();
    if (this_present_lon || that_present_lon) {
      if (!(this_present_lon && that_present_lon))
        return false;
      if (!this.lon.equals(that.lon))
        return false;
    }

    boolean this_present_mapLon = true && this.isSetMapLon();
    boolean that_present_mapLon = true && that.isSetMapLon();
    if (this_present_mapLon || that_present_mapLon) {
      if (!(this_present_mapLon && that_present_mapLon))
        return false;
      if (!this.mapLon.equals(that.mapLon))
        return false;
    }

    boolean this_present_mapLat = true && this.isSetMapLat();
    boolean that_present_mapLat = true && that.isSetMapLat();
    if (this_present_mapLat || that_present_mapLat) {
      if (!(this_present_mapLat && that_present_mapLat))
        return false;
      if (!this.mapLat.equals(that.mapLat))
        return false;
    }

    boolean this_present_gpsSpeed = true && this.isSetGpsSpeed();
    boolean that_present_gpsSpeed = true && that.isSetGpsSpeed();
    if (this_present_gpsSpeed || that_present_gpsSpeed) {
      if (!(this_present_gpsSpeed && that_present_gpsSpeed))
        return false;
      if (!this.gpsSpeed.equals(that.gpsSpeed))
        return false;
    }

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_utc = true && this.isSetUtc();
    boolean that_present_utc = true && that.isSetUtc();
    if (this_present_utc || that_present_utc) {
      if (!(this_present_utc && that_present_utc))
        return false;
      if (!this.utc.equals(that.utc))
        return false;
    }

    boolean this_present_alarmCode = true && this.isSetAlarmCode();
    boolean that_present_alarmCode = true && that.isSetAlarmCode();
    if (this_present_alarmCode || that_present_alarmCode) {
      if (!(this_present_alarmCode && that_present_alarmCode))
        return false;
      if (!this.alarmCode.equals(that.alarmCode))
        return false;
    }

    boolean this_present_alarmUtc = true && this.isSetAlarmUtc();
    boolean that_present_alarmUtc = true && that.isSetAlarmUtc();
    if (this_present_alarmUtc || that_present_alarmUtc) {
      if (!(this_present_alarmUtc && that_present_alarmUtc))
        return false;
      if (!this.alarmUtc.equals(that.alarmUtc))
        return false;
    }

    boolean this_present_alarmSysUtc = true && this.isSetAlarmSysUtc();
    boolean that_present_alarmSysUtc = true && that.isSetAlarmSysUtc();
    if (this_present_alarmSysUtc || that_present_alarmSysUtc) {
      if (!(this_present_alarmSysUtc && that_present_alarmSysUtc))
        return false;
      if (!this.alarmSysUtc.equals(that.alarmSysUtc))
        return false;
    }

    boolean this_present_vehicleSpeed = true && this.isSetVehicleSpeed();
    boolean that_present_vehicleSpeed = true && that.isSetVehicleSpeed();
    if (this_present_vehicleSpeed || that_present_vehicleSpeed) {
      if (!(this_present_vehicleSpeed && that_present_vehicleSpeed))
        return false;
      if (!this.vehicleSpeed.equals(that.vehicleSpeed))
        return false;
    }

    boolean this_present_basestatus = true && this.isSetBasestatus();
    boolean that_present_basestatus = true && that.isSetBasestatus();
    if (this_present_basestatus || that_present_basestatus) {
      if (!(this_present_basestatus && that_present_basestatus))
        return false;
      if (!this.basestatus.equals(that.basestatus))
        return false;
    }

    boolean this_present_extendstatus = true && this.isSetExtendstatus();
    boolean that_present_extendstatus = true && that.isSetExtendstatus();
    if (this_present_extendstatus || that_present_extendstatus) {
      if (!(this_present_extendstatus && that_present_extendstatus))
        return false;
      if (!this.extendstatus.equals(that.extendstatus))
        return false;
    }

    boolean this_present_speedFrom = true && this.isSetSpeedFrom();
    boolean that_present_speedFrom = true && that.isSetSpeedFrom();
    if (this_present_speedFrom || that_present_speedFrom) {
      if (!(this_present_speedFrom && that_present_speedFrom))
        return false;
      if (!this.speedFrom.equals(that.speedFrom))
        return false;
    }

    boolean this_present_height = true && this.isSetHeight();
    boolean that_present_height = true && that.isSetHeight();
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (!this.height.equals(that.height))
        return false;
    }

    boolean this_present_commaddr = true && this.isSetCommaddr();
    boolean that_present_commaddr = true && that.isSetCommaddr();
    if (this_present_commaddr || that_present_commaddr) {
      if (!(this_present_commaddr && that_present_commaddr))
        return false;
      if (!this.commaddr.equals(that.commaddr))
        return false;
    }

    boolean this_present_tid = true && this.isSetTid();
    boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (!this.tid.equals(that.tid))
        return false;
    }

    boolean this_present_oemcode = true && this.isSetOemcode();
    boolean that_present_oemcode = true && that.isSetOemcode();
    if (this_present_oemcode || that_present_oemcode) {
      if (!(this_present_oemcode && that_present_oemcode))
        return false;
      if (!this.oemcode.equals(that.oemcode))
        return false;
    }

    boolean this_present_systemTime = true && this.isSetSystemTime();
    boolean that_present_systemTime = true && that.isSetSystemTime();
    if (this_present_systemTime || that_present_systemTime) {
      if (!(this_present_systemTime && that_present_systemTime))
        return false;
      if (!this.systemTime.equals(that.systemTime))
        return false;
    }

    boolean this_present_msgid = true && this.isSetMsgid();
    boolean that_present_msgid = true && that.isSetMsgid();
    if (this_present_msgid || that_present_msgid) {
      if (!(this_present_msgid && that_present_msgid))
        return false;
      if (!this.msgid.equals(that.msgid))
        return false;
    }

    boolean this_present_isValid = true && this.isSetIsValid();
    boolean that_present_isValid = true && that.isSetIsValid();
    if (this_present_isValid || that_present_isValid) {
      if (!(this_present_isValid && that_present_isValid))
        return false;
      if (!this.isValid.equals(that.isValid))
        return false;
    }

    boolean this_present_msgUtc = true && this.isSetMsgUtc();
    boolean that_present_msgUtc = true && that.isSetMsgUtc();
    if (this_present_msgUtc || that_present_msgUtc) {
      if (!(this_present_msgUtc && that_present_msgUtc))
        return false;
      if (!this.msgUtc.equals(that.msgUtc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Message typedOther = (Message)other;

    lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLon()).compareTo(typedOther.isSetLon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon, typedOther.lon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapLon()).compareTo(typedOther.isSetMapLon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapLon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapLon, typedOther.mapLon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapLat()).compareTo(typedOther.isSetMapLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapLat, typedOther.mapLat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGpsSpeed()).compareTo(typedOther.isSetGpsSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGpsSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpsSpeed, typedOther.gpsSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHead()).compareTo(typedOther.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, typedOther.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtc()).compareTo(typedOther.isSetUtc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utc, typedOther.utc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmCode()).compareTo(typedOther.isSetAlarmCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmCode, typedOther.alarmCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmUtc()).compareTo(typedOther.isSetAlarmUtc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmUtc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmUtc, typedOther.alarmUtc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmSysUtc()).compareTo(typedOther.isSetAlarmSysUtc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmSysUtc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmSysUtc, typedOther.alarmSysUtc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicleSpeed()).compareTo(typedOther.isSetVehicleSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicleSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleSpeed, typedOther.vehicleSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBasestatus()).compareTo(typedOther.isSetBasestatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasestatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basestatus, typedOther.basestatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendstatus()).compareTo(typedOther.isSetExtendstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendstatus, typedOther.extendstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeedFrom()).compareTo(typedOther.isSetSpeedFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeedFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speedFrom, typedOther.speedFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommaddr()).compareTo(typedOther.isSetCommaddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommaddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commaddr, typedOther.commaddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOemcode()).compareTo(typedOther.isSetOemcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOemcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oemcode, typedOther.oemcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemTime()).compareTo(typedOther.isSetSystemTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemTime, typedOther.systemTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgid()).compareTo(typedOther.isSetMsgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgid, typedOther.msgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsValid()).compareTo(typedOther.isSetIsValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isValid, typedOther.isValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgUtc()).compareTo(typedOther.isSetMsgUtc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgUtc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgUtc, typedOther.msgUtc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("vid:");
    if (this.vid == null) {
      sb.append("null");
    } else {
      sb.append(this.vid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lat:");
    if (this.lat == null) {
      sb.append("null");
    } else {
      sb.append(this.lat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lon:");
    if (this.lon == null) {
      sb.append("null");
    } else {
      sb.append(this.lon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapLon:");
    if (this.mapLon == null) {
      sb.append("null");
    } else {
      sb.append(this.mapLon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapLat:");
    if (this.mapLat == null) {
      sb.append("null");
    } else {
      sb.append(this.mapLat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gpsSpeed:");
    if (this.gpsSpeed == null) {
      sb.append("null");
    } else {
      sb.append(this.gpsSpeed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("utc:");
    if (this.utc == null) {
      sb.append("null");
    } else {
      sb.append(this.utc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmCode:");
    if (this.alarmCode == null) {
      sb.append("null");
    } else {
      sb.append(this.alarmCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmUtc:");
    if (this.alarmUtc == null) {
      sb.append("null");
    } else {
      sb.append(this.alarmUtc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmSysUtc:");
    if (this.alarmSysUtc == null) {
      sb.append("null");
    } else {
      sb.append(this.alarmSysUtc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicleSpeed:");
    if (this.vehicleSpeed == null) {
      sb.append("null");
    } else {
      sb.append(this.vehicleSpeed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("basestatus:");
    if (this.basestatus == null) {
      sb.append("null");
    } else {
      sb.append(this.basestatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extendstatus:");
    if (this.extendstatus == null) {
      sb.append("null");
    } else {
      sb.append(this.extendstatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("speedFrom:");
    if (this.speedFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.speedFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    if (this.height == null) {
      sb.append("null");
    } else {
      sb.append(this.height);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commaddr:");
    if (this.commaddr == null) {
      sb.append("null");
    } else {
      sb.append(this.commaddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tid:");
    if (this.tid == null) {
      sb.append("null");
    } else {
      sb.append(this.tid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oemcode:");
    if (this.oemcode == null) {
      sb.append("null");
    } else {
      sb.append(this.oemcode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemTime:");
    if (this.systemTime == null) {
      sb.append("null");
    } else {
      sb.append(this.systemTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgid:");
    if (this.msgid == null) {
      sb.append("null");
    } else {
      sb.append(this.msgid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isValid:");
    if (this.isValid == null) {
      sb.append("null");
    } else {
      sb.append(this.isValid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgUtc:");
    if (this.msgUtc == null) {
      sb.append("null");
    } else {
      sb.append(this.msgUtc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vid = iprot.readString();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lat = iprot.readString();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lon = iprot.readString();
              struct.setLonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAP_LON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mapLon = iprot.readString();
              struct.setMapLonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAP_LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mapLat = iprot.readString();
              struct.setMapLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GPS_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gpsSpeed = iprot.readString();
              struct.setGpsSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.head = iprot.readString();
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UTC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.utc = iprot.readString();
              struct.setUtcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALARM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alarmCode = iprot.readString();
              struct.setAlarmCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ALARM_UTC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alarmUtc = iprot.readString();
              struct.setAlarmUtcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ALARM_SYS_UTC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alarmSysUtc = iprot.readString();
              struct.setAlarmSysUtcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VEHICLE_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicleSpeed = iprot.readString();
              struct.setVehicleSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BASESTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.basestatus = iprot.readString();
              struct.setBasestatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXTENDSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extendstatus = iprot.readString();
              struct.setExtendstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SPEED_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.speedFrom = iprot.readString();
              struct.setSpeedFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.height = iprot.readString();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COMMADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commaddr = iprot.readString();
              struct.setCommaddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tid = iprot.readString();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // OEMCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oemcode = iprot.readString();
              struct.setOemcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SYSTEM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemTime = iprot.readString();
              struct.setSystemTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MSGID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgid = iprot.readString();
              struct.setMsgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isValid = iprot.readString();
              struct.setIsValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MSG_UTC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgUtc = iprot.readString();
              struct.setMsgUtcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vid != null) {
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeString(struct.vid);
        oprot.writeFieldEnd();
      }
      if (struct.lat != null) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeString(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.lon != null) {
        oprot.writeFieldBegin(LON_FIELD_DESC);
        oprot.writeString(struct.lon);
        oprot.writeFieldEnd();
      }
      if (struct.mapLon != null) {
        oprot.writeFieldBegin(MAP_LON_FIELD_DESC);
        oprot.writeString(struct.mapLon);
        oprot.writeFieldEnd();
      }
      if (struct.mapLat != null) {
        oprot.writeFieldBegin(MAP_LAT_FIELD_DESC);
        oprot.writeString(struct.mapLat);
        oprot.writeFieldEnd();
      }
      if (struct.gpsSpeed != null) {
        oprot.writeFieldBegin(GPS_SPEED_FIELD_DESC);
        oprot.writeString(struct.gpsSpeed);
        oprot.writeFieldEnd();
      }
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        oprot.writeString(struct.head);
        oprot.writeFieldEnd();
      }
      if (struct.utc != null) {
        oprot.writeFieldBegin(UTC_FIELD_DESC);
        oprot.writeString(struct.utc);
        oprot.writeFieldEnd();
      }
      if (struct.alarmCode != null) {
        oprot.writeFieldBegin(ALARM_CODE_FIELD_DESC);
        oprot.writeString(struct.alarmCode);
        oprot.writeFieldEnd();
      }
      if (struct.alarmUtc != null) {
        oprot.writeFieldBegin(ALARM_UTC_FIELD_DESC);
        oprot.writeString(struct.alarmUtc);
        oprot.writeFieldEnd();
      }
      if (struct.alarmSysUtc != null) {
        oprot.writeFieldBegin(ALARM_SYS_UTC_FIELD_DESC);
        oprot.writeString(struct.alarmSysUtc);
        oprot.writeFieldEnd();
      }
      if (struct.vehicleSpeed != null) {
        oprot.writeFieldBegin(VEHICLE_SPEED_FIELD_DESC);
        oprot.writeString(struct.vehicleSpeed);
        oprot.writeFieldEnd();
      }
      if (struct.basestatus != null) {
        oprot.writeFieldBegin(BASESTATUS_FIELD_DESC);
        oprot.writeString(struct.basestatus);
        oprot.writeFieldEnd();
      }
      if (struct.extendstatus != null) {
        oprot.writeFieldBegin(EXTENDSTATUS_FIELD_DESC);
        oprot.writeString(struct.extendstatus);
        oprot.writeFieldEnd();
      }
      if (struct.speedFrom != null) {
        oprot.writeFieldBegin(SPEED_FROM_FIELD_DESC);
        oprot.writeString(struct.speedFrom);
        oprot.writeFieldEnd();
      }
      if (struct.height != null) {
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeString(struct.height);
        oprot.writeFieldEnd();
      }
      if (struct.commaddr != null) {
        oprot.writeFieldBegin(COMMADDR_FIELD_DESC);
        oprot.writeString(struct.commaddr);
        oprot.writeFieldEnd();
      }
      if (struct.tid != null) {
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeString(struct.tid);
        oprot.writeFieldEnd();
      }
      if (struct.oemcode != null) {
        oprot.writeFieldBegin(OEMCODE_FIELD_DESC);
        oprot.writeString(struct.oemcode);
        oprot.writeFieldEnd();
      }
      if (struct.systemTime != null) {
        oprot.writeFieldBegin(SYSTEM_TIME_FIELD_DESC);
        oprot.writeString(struct.systemTime);
        oprot.writeFieldEnd();
      }
      if (struct.msgid != null) {
        oprot.writeFieldBegin(MSGID_FIELD_DESC);
        oprot.writeString(struct.msgid);
        oprot.writeFieldEnd();
      }
      if (struct.isValid != null) {
        oprot.writeFieldBegin(IS_VALID_FIELD_DESC);
        oprot.writeString(struct.isValid);
        oprot.writeFieldEnd();
      }
      if (struct.msgUtc != null) {
        oprot.writeFieldBegin(MSG_UTC_FIELD_DESC);
        oprot.writeString(struct.msgUtc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVid()) {
        optionals.set(0);
      }
      if (struct.isSetLat()) {
        optionals.set(1);
      }
      if (struct.isSetLon()) {
        optionals.set(2);
      }
      if (struct.isSetMapLon()) {
        optionals.set(3);
      }
      if (struct.isSetMapLat()) {
        optionals.set(4);
      }
      if (struct.isSetGpsSpeed()) {
        optionals.set(5);
      }
      if (struct.isSetHead()) {
        optionals.set(6);
      }
      if (struct.isSetUtc()) {
        optionals.set(7);
      }
      if (struct.isSetAlarmCode()) {
        optionals.set(8);
      }
      if (struct.isSetAlarmUtc()) {
        optionals.set(9);
      }
      if (struct.isSetAlarmSysUtc()) {
        optionals.set(10);
      }
      if (struct.isSetVehicleSpeed()) {
        optionals.set(11);
      }
      if (struct.isSetBasestatus()) {
        optionals.set(12);
      }
      if (struct.isSetExtendstatus()) {
        optionals.set(13);
      }
      if (struct.isSetSpeedFrom()) {
        optionals.set(14);
      }
      if (struct.isSetHeight()) {
        optionals.set(15);
      }
      if (struct.isSetCommaddr()) {
        optionals.set(16);
      }
      if (struct.isSetTid()) {
        optionals.set(17);
      }
      if (struct.isSetOemcode()) {
        optionals.set(18);
      }
      if (struct.isSetSystemTime()) {
        optionals.set(19);
      }
      if (struct.isSetMsgid()) {
        optionals.set(20);
      }
      if (struct.isSetIsValid()) {
        optionals.set(21);
      }
      if (struct.isSetMsgUtc()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetVid()) {
        oprot.writeString(struct.vid);
      }
      if (struct.isSetLat()) {
        oprot.writeString(struct.lat);
      }
      if (struct.isSetLon()) {
        oprot.writeString(struct.lon);
      }
      if (struct.isSetMapLon()) {
        oprot.writeString(struct.mapLon);
      }
      if (struct.isSetMapLat()) {
        oprot.writeString(struct.mapLat);
      }
      if (struct.isSetGpsSpeed()) {
        oprot.writeString(struct.gpsSpeed);
      }
      if (struct.isSetHead()) {
        oprot.writeString(struct.head);
      }
      if (struct.isSetUtc()) {
        oprot.writeString(struct.utc);
      }
      if (struct.isSetAlarmCode()) {
        oprot.writeString(struct.alarmCode);
      }
      if (struct.isSetAlarmUtc()) {
        oprot.writeString(struct.alarmUtc);
      }
      if (struct.isSetAlarmSysUtc()) {
        oprot.writeString(struct.alarmSysUtc);
      }
      if (struct.isSetVehicleSpeed()) {
        oprot.writeString(struct.vehicleSpeed);
      }
      if (struct.isSetBasestatus()) {
        oprot.writeString(struct.basestatus);
      }
      if (struct.isSetExtendstatus()) {
        oprot.writeString(struct.extendstatus);
      }
      if (struct.isSetSpeedFrom()) {
        oprot.writeString(struct.speedFrom);
      }
      if (struct.isSetHeight()) {
        oprot.writeString(struct.height);
      }
      if (struct.isSetCommaddr()) {
        oprot.writeString(struct.commaddr);
      }
      if (struct.isSetTid()) {
        oprot.writeString(struct.tid);
      }
      if (struct.isSetOemcode()) {
        oprot.writeString(struct.oemcode);
      }
      if (struct.isSetSystemTime()) {
        oprot.writeString(struct.systemTime);
      }
      if (struct.isSetMsgid()) {
        oprot.writeString(struct.msgid);
      }
      if (struct.isSetIsValid()) {
        oprot.writeString(struct.isValid);
      }
      if (struct.isSetMsgUtc()) {
        oprot.writeString(struct.msgUtc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.vid = iprot.readString();
        struct.setVidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lat = iprot.readString();
        struct.setLatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lon = iprot.readString();
        struct.setLonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mapLon = iprot.readString();
        struct.setMapLonIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mapLat = iprot.readString();
        struct.setMapLatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gpsSpeed = iprot.readString();
        struct.setGpsSpeedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.head = iprot.readString();
        struct.setHeadIsSet(true);
      }
      if (incoming.get(7)) {
        struct.utc = iprot.readString();
        struct.setUtcIsSet(true);
      }
      if (incoming.get(8)) {
        struct.alarmCode = iprot.readString();
        struct.setAlarmCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.alarmUtc = iprot.readString();
        struct.setAlarmUtcIsSet(true);
      }
      if (incoming.get(10)) {
        struct.alarmSysUtc = iprot.readString();
        struct.setAlarmSysUtcIsSet(true);
      }
      if (incoming.get(11)) {
        struct.vehicleSpeed = iprot.readString();
        struct.setVehicleSpeedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.basestatus = iprot.readString();
        struct.setBasestatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.extendstatus = iprot.readString();
        struct.setExtendstatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.speedFrom = iprot.readString();
        struct.setSpeedFromIsSet(true);
      }
      if (incoming.get(15)) {
        struct.height = iprot.readString();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(16)) {
        struct.commaddr = iprot.readString();
        struct.setCommaddrIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tid = iprot.readString();
        struct.setTidIsSet(true);
      }
      if (incoming.get(18)) {
        struct.oemcode = iprot.readString();
        struct.setOemcodeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.systemTime = iprot.readString();
        struct.setSystemTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.msgid = iprot.readString();
        struct.setMsgidIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isValid = iprot.readString();
        struct.setIsValidIsSet(true);
      }
      if (incoming.get(22)) {
        struct.msgUtc = iprot.readString();
        struct.setMsgUtcIsSet(true);
      }
    }
  }

}

